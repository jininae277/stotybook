{"version":3,"file":"stories-TableList-stories.d8e612df.iframe.bundle.js","mappings":";;;;AAkMA;AACA;;;;;;;;;;;AAaA;;AAIA;;;;AAMA;;;;;;;;;AAWA;;;;;;;;AC3LA;AACA;AACA;AACA;;;AAGA;AAIA;AAIA;;AAKA;;;;AAKA;AAGA;AAGA;;;;;;AAQA;AACA;AACA;;;;;AAKA;;AAIA","sources":["webpack://storybooks/./src/stories/TableList.jsx","webpack://storybooks/./src/stories/Button.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Button } from './Button';\nimport Box from '@mui/material/Box';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { Pagination } from '@mui/material';\nimport SelectCustom from './SelectCustom';\n\nexport const TableList = ({ variant, backgroundColor, size, label, icon, isFullWidth = false, ...props }) => {\n  const [page, setPage] = useState(1);  // 현재 페이지\n  const [pageSize, setPageSize] = useState(10);  // 한 페이지에 표시할 데이터 수\n  const [selectedRows, setSelectedRows] = useState([]);  \n\n  const columns = [\n    { field: 'id', headerName: 'ID', width: 90 },\n    { field: 'firstName', headerName: 'First name', width: 150, editable: true },\n    { field: 'lastName', headerName: 'Last name', width: 150, editable: true },\n    { field: 'age', headerName: 'Age', type: 'number', width: 110, editable: true },\n    {\n      field: 'fullName',\n      headerName: 'Full name',\n      description: 'This column has a value getter and is not sortable.',\n      sortable: false,\n      width: 160,\n      valueGetter: (value, row) => `${row.firstName || ''} ${row.lastName || ''}`,\n    },\n  ];\n\n  const [rows, setRows] = useState([\n    { id: 1, lastName: 'Snow', firstName: 'Jon', age: 14 },\n    { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 31 },\n    { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 31 },\n    { id: 4, lastName: 'Stark', firstName: 'Arya', age: 11 },\n    { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n    { id: 6, lastName: 'Melisandre', firstName: 'cc', age: 150 },\n    { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n    { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n    { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n    { id: 10, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n    { id: 11, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n    { id: 12, lastName: 'Snow', firstName: 'Jon', age: 14 },\n    { id: 13, lastName: 'Lannister', firstName: 'Cersei', age: 31 },\n    { id: 14, lastName: 'Lannister', firstName: 'Jaime', age: 31 },\n    { id: 15, lastName: 'Stark', firstName: 'Arya', age: 11 },\n    { id: 16, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n    { id: 17, lastName: 'Melisandre', firstName: 'cc', age: 150 },\n    { id: 18, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n    { id: 19, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n    { id: 20, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n    { id: 21, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n    { id: 22, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n    { id: 23, lastName: 'Lannister', firstName: 'Cersei', age: 31 },\n    { id: 24, lastName: 'Lannister', firstName: 'Jaime', age: 32 },\n    { id: 25, lastName: 'Stark', firstName: 'Arya', age: 2 },\n    { id: 26, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n    { id: 27, lastName: 'Melisandre', firstName: 'cc', age: 250 },\n    { id: 28, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n    { id: 29, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n    { id: 30, lastName: 'Roxie', firstName: 'Harvey', age: 65 },   \n  ]);\n\n  const totalRows = rows.length;\n\n  const paginatedRows = rows.slice((page - 1) * pageSize, page * pageSize);\n\n  const handleRowsPerPageChange = (selectedValue) => {\n    const newPageSize = Number(selectedValue);\n    setPageSize(newPageSize); \n  };\n\n  // 페이지 변경 처리\n  const handlePageChange = (event, value) => {\n    setPage(value);  \n  };\n\n  const handleDelete = () => {\n    const remainingRows = rows.filter((row) => !selectedRows.includes(row.id));\n    setRows(remainingRows);\n    \n    console.log('삭제된 행:', selectedRows);\n    console.log('남은 행:', remainingRows);\n  };\n  \n\n  useEffect(() => {\n    setPage(1);  \n  }, [pageSize]);\n\n\n\n\n  return (\n    <TableListWrap isFullWidth={isFullWidth}>\n      <ListTop>\n        <b>총 {totalRows}개</b>\n        <div>\n          <Button icon=\"delete\" label=\"삭제\"  onClick={handleDelete} variant=\"secondary\"/>\n          <Button label=\"버튼 2\" onClick={() => {}} variant=\"default\" />\n          <Button icon=\"save\" label=\"등록\" onClick={() => {}} variant=\"primary\" />\n        </div>\n      </ListTop>\n      <ListResult>\n        <Box sx={{ width: '100%',  height:'500px' }}>\n          <DataGrid\n            rows={paginatedRows}\n            columns={columns}\n            checkboxSelection\n            onSelectionModelChange={(newSelection) => setSelectedRows(newSelection.selectionModel)}\n            disableRowSelectionOnClick\n            disableColumnResize//컬럼 너비 조정 비활성화\n            pagination={true}\n            pageSize={pageSize}\n            components={{\n              Footer: () => null,\n            }}\n            localeText={{\n              noRowsLabel: '조회된 내용이 없습니다.',\n            }}\n\n            sx={{\n              '&.MuiDataGrid-overlay':{\n                fontSize:'16px',\n              },\n              \n              '& .MuiDataGrid-columnHeaders': {\n                outline: 'none', // columnHeader의 outline 제거\n              },\n              '& .MuiDataGrid-columnHeader:focus': {\n                outline: 'none', // 포커스 시 나타나는 outline 제거\n              },\n              '& .MuiDataGrid-cell':{\n                cursor:'pointer',\n              },\n              '& .MuiDataGrid-cell:focus':{\n                outline:'none'\n              },\n\n              '& .MuiDataGrid-footerContainer': {\n                display: 'none',\n                height: 'unset',\n                minHeight: 'unset',\n              },\n            }}\n          />\n          {/* {totalRows === 0 && (\n            <NoDataMessage>\n              조회된 내용이 없습니다.\n            </NoDataMessage>\n          )} */}\n          \n        </Box>\n        {totalRows > 0 && (\n          <TableBottom>\n            <SelectCustom\n            displayEmpty\n              placeholder=\"선택하세요\"\n              value={pageSize}\n              selected={pageSize}\n              //selected={[String(pageSize)]}\n              onChange={handleRowsPerPageChange}\n              multiple={false}\n              options={[\n                { value: 10, label: '10개씩 보기' },\n                { value: 25, label: '25개씩 보기' },\n                { value: 50, label: '50개씩 보기' },\n                { value: 100, label: '100개씩 보기' },\n              ]} \n            \n            />\n            <Pagination\n              count={Math.ceil(totalRows / pageSize)}  \n              page={page}     \n            // rowsPerPage={pageSize}\n              onChange={handlePageChange}\n              color=\"primary\"\n              sx={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: 'calc(100% - 150px)',\n                marginRight: '150px',\n              }}\n            />\n          </TableBottom>\n        )}\n      </ListResult>\n    </TableListWrap>\n  );\n};\n\nconst TableListWrap = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  padding: 20px;\n  width: ${({ isFullWidth }) => (isFullWidth ? '100%' : 'auto')};\n`;\n\nconst ListTop = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 20px;\n\n  > div {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n  }\n`;\n\nconst ListResult = styled.div`\n  padding-top: 20px;\n`;\n\nconst TableBottom = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 20px;\n`;\n\nconst NoDataMessage = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n  font-size: 16px;\n  color: #888;\n  font-weight: bold;\n  border-bottom: '1px solid #ddd'; \n`;\n\nexport default TableList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport saveIcon from '../icon/icon-save.png';\nimport deleteIcon from '../icon/icon-delete.png';\n\n/** Primary UI component for user interaction */\nexport const Button = ({ \n  variant = 'default', \n  backgroundColor = null, \n  size = 'medium', \n  label, \n  icon = null, \n  isFullWidth = false, \n  onClick = () => {}, \n  ...props \n}) => {\n  return (\n    <StyledButton\n      type=\"button\"\n      variant={variant}\n      size={size}\n      style={backgroundColor && { backgroundColor }}\n      icon={icon}\n      isFullWidth={isFullWidth} \n      onClick={onClick}\n      {...props}\n    > \n      {label}\n    </StyledButton>\n  );\n};\n\n// Define the styled component with conditional styling based on props\nconst StyledButton = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-weight: 700;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  padding: 5px 10px;\n  width: ${({ isFullWidth }) => (isFullWidth ? '100%' : 'auto')};\n  height: ${({ size }) => (size === 'small' ? '22px' : size === 'large' ? '52px' : '40px')};\n  line-height: ${({ size }) => (size === 'small' ? '11px' : size === 'large' ? '22px' : '23px')};\n  font-size: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '16px' : '14px')};\n\n  /* Style based on the variant prop */\n  background-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    'transparent'};\n  color: ${({ variant }) => \n    variant === 'primary' ? 'white' : \n    variant === 'secondary' ? '#333' : \n    '#000'};\n  border-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    '#ddd'};\n\n  box-shadow: ${({ variant }) => \n    variant === 'secondary' ? 'rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset' : 'none'};\n\n  &:disabled {\n    cursor: unset;\n    background-color: ${({ variant }) => \n      variant === 'primary' ? '#eee' : \n      variant === 'secondary' ? '#eee' : '#eee'};\n    border-color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n     color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n  }\n\n  /* iconBtn */\n  &::before {\n    content: '';\n    display: ${({ icon }) => (icon ? 'inline-block' : 'none')};\n    width: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    height: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    margin-right: 6px;\n    vertical-align: middle;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-image: ${({ icon }) => \n      icon === 'save' ? `url(${saveIcon})` : \n      icon === 'delete' ? `url(${deleteIcon})` : 'none'};\n  }\n`;\n\nButton.propTypes = {\n  /** Button variant - default, primary, secondary */\n  variant: PropTypes.oneOf(['default', 'primary', 'secondary']),\n  /** What background color to use */\n  backgroundColor: PropTypes.string,\n  /** How large should the button be? */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** Button contents */\n  label: PropTypes.string.isRequired,\n  /* icon 여부 */\n  icon: PropTypes.oneOf(['save', 'delete']),\n  /** Optional click handler */\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n"],"names":[],"sourceRoot":""}