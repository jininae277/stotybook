{"version":3,"file":"254.348abf61.iframe.bundle.js","mappings":";;;;;;;;AA0CA;AACA;AACA;AACA;;;AAGA;AAIA;AAIA;;AAKA;;;;AAKA;AAGA;AAGA;;;;;;AAQA;AACA;AACA;;;;;AAKA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6KA;;;AAKA;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;AAOA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;AAmBA","sources":["webpack://storybooks/./src/stories/Button.jsx","webpack://storybooks/./src/stories/Header.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport saveIcon from '../icon/icon-save.png';\nimport deleteIcon from '../icon/icon-delete.png';\n\n/** Primary UI component for user interaction */\nexport const Button = ({ \n  variant = 'default', \n  backgroundColor = null, \n  size = 'medium', \n  label, \n  icon = null, \n  isFullWidth = false, \n  onClick = () => {}, \n  ...props \n}) => {\n  return (\n    <StyledButton\n      type=\"button\"\n      variant={variant}\n      size={size}\n      style={backgroundColor && { backgroundColor }}\n      icon={icon}\n      isFullWidth={isFullWidth} \n      onClick={onClick}\n      {...props}\n    > \n      {label}\n    </StyledButton>\n  );\n};\n\n// Define the styled component with conditional styling based on props\nconst StyledButton = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-weight: 700;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  padding: 5px 10px;\n  width: ${({ isFullWidth }) => (isFullWidth ? '100%' : 'auto')};\n  height: ${({ size }) => (size === 'small' ? '22px' : size === 'large' ? '52px' : '40px')};\n  line-height: ${({ size }) => (size === 'small' ? '11px' : size === 'large' ? '22px' : '23px')};\n  font-size: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '16px' : '14px')};\n\n  /* Style based on the variant prop */\n  background-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    'transparent'};\n  color: ${({ variant }) => \n    variant === 'primary' ? 'white' : \n    variant === 'secondary' ? '#333' : \n    '#000'};\n  border-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    '#ddd'};\n\n  box-shadow: ${({ variant }) => \n    variant === 'secondary' ? 'rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset' : 'none'};\n\n  &:disabled {\n    cursor: unset;\n    background-color: ${({ variant }) => \n      variant === 'primary' ? '#eee' : \n      variant === 'secondary' ? '#eee' : '#eee'};\n    border-color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n     color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n  }\n\n  /* iconBtn */\n  &::before {\n    content: '';\n    display: ${({ icon }) => (icon ? 'inline-block' : 'none')};\n    width: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    height: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    margin-right: 6px;\n    vertical-align: middle;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-image: ${({ icon }) => \n      icon === 'save' ? `url(${saveIcon})` : \n      icon === 'delete' ? `url(${deleteIcon})` : 'none'};\n  }\n`;\n\nButton.propTypes = {\n  /** Button variant - default, primary, secondary */\n  variant: PropTypes.oneOf(['default', 'primary', 'secondary']),\n  /** What background color to use */\n  backgroundColor: PropTypes.string,\n  /** How large should the button be? */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** Button contents */\n  label: PropTypes.string.isRequired,\n  /* icon 여부 */\n  icon: PropTypes.oneOf(['save', 'delete']),\n  /** Optional click handler */\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from './Button';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport CircleNotificationsIcon from \"@mui/icons-material/CircleNotifications\";\nimport HelpIcon from \"@mui/icons-material/Help\";\nimport styled from 'styled-components';\nimport StarsIcon from '@mui/icons-material/Stars';\nimport WidgetsIcon from '@mui/icons-material/Widgets';\nimport PersonIcon from '@mui/icons-material/Person';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport TypeInput from \"./TypeInput\"; \n\n\nconst favoriteMenus = [\n  {\n    title: \"즐겨찾기 한 메뉴명1\",\n\n    \n    depths: [\"1depth\", \"2depth\", \"3depth\"]\n  },\n  {\n    title: \"즐겨찾기 한 메뉴명2\",\n    depths: [\"1depth\", \"2depth\", \"3depth\", \"4depth\"]\n  },\n  {\n    title: \"즐겨찾기 한 메뉴명3\",\n    depths: [\"1depth\", \"2depth\", \"3depth\", \"4depth\"]\n  },\n  {\n    title: \"즐겨찾기 한 메뉴명4\",\n    depths: [\"1depth\", \"2depth\", \"3depth\", \"4depth\"]\n  },\n  {\n    title: \"즐겨찾기 한 메뉴명5\",\n    depths: [\"1depth\", \"2depth\", \"3depth\", \"4depth\"]\n  },\n  {\n    title: \"즐겨찾기 한 메뉴명6\",\n    depths: [\"1depth\", \"2depth\", \"3depth\", \"4depth\"]\n  },\n];\n\nconst notifications = [\n  { id: 1, date: '2024-01-01 12:34', content: '알림내용입니다. 알림내용입니다. 알림내용입니다. 알림내용입니다. 알림내용입니다.' },\n  { id: 2, date: '2024-02-01 14:00', content: '다른 알림 내용입니다. 내용이 길어질 경우 잘려서 표시됩니다.' },\n  { id: 3, date: '2024-03-01 16:10', content: '또 다른 알림 내용이 이곳에 들어갑니다. 이 내용도 마찬가지로 길면 \\'...\\'이 표시됩니다.' },\n];\n\n\nexport default function Header({ user, onLogin, onLogout, onCreateAccount }) {\n  const [selectedButton, setSelectedButton] = useState(null); \n\n  const handleButtonClick = (button) => {\n    if (selectedButton === button) {\n      setSelectedButton(null); \n    } else {\n      setSelectedButton(button); \n    }\n  };\n\n  return (\n    <HeaderWrap>\n      <div className=\"left\">\n        <MenuIcon sx={{  fontSize: \"40px\" }}/>\n        <h1>로고영역</h1>\n      </div>\n      <div className=\"menu\">\n        <Dashboard>Dashboard</Dashboard>\n        <MenuItem>1depth</MenuItem>\n        <MenuItem>1depth</MenuItem>\n        <MenuItem>1depth</MenuItem>\n        <MenuItem>1depth</MenuItem>\n        <MenuItem>1depth</MenuItem>\n      </div>\n      <div className=\"right\">\n        <div>\n          <button  onClick={() => handleButtonClick('stars')}>\n            <StarsIcon sx={{ fill: \"#ccc\", fontSize: \"40px\" }} />\n          </button>\n          {selectedButton === 'stars' && <Popup>\n              <Popup_Header>\n                <Popup_Tit>즐겨찾기</Popup_Tit>\n                <SettingsIcon/>\n              </Popup_Header>\n              <Popup_Content>\n                <Stars>\n                  {favoriteMenus.map((menu, index) => (\n                    <li key={index}>\n                      <b>{menu.title}</b>\n                      <div>\n                        {menu.depths.map((depth, i) => (\n                          <span key={i}>{depth}</span>\n                        ))}\n                      </div>\n                    </li>\n                  ))}\n                </Stars>\n              </Popup_Content>\n            </Popup>}\n\n          <button onClick={() => handleButtonClick('notifications')}>\n              <CircleNotificationsIcon sx={{ fill: \"#ccc\", fontSize: \"40px\" }} />\n          </button>\n          {selectedButton === 'notifications' && <Popup>\n              <Popup_Header>\n                <Popup_Tit>알림</Popup_Tit>\n                <SettingsIcon/>\n              </Popup_Header>\n              <Popup_Content>\n                <button className='view_all'>전체보기 &gt;</button>\n                <Notifi>\n                {notifications.map(notification => (\n                  <li key={notification.id}>\n                    <span>{notification.date}</span>\n                    <div>{notification.content}</div>\n                  </li>\n                ))}\n                </Notifi>\n              </Popup_Content>\n            </Popup>}\n          \n          <button onClick={() => handleButtonClick('help')}>\n            <HelpIcon sx={{ fill: \"#ccc\", fontSize: \"40px\" }} />\n          </button>\n          {selectedButton === 'help' && <Popup>\n            <Popup_Header>\n              <Popup_Tit>도움말</Popup_Tit>\n            </Popup_Header>  \n            <Popup_Content>\n              <div>\n                <button>전체</button>\n                <button>카테고리</button>\n                <button>카테고리</button>\n                <button>카테고리</button>\n                <button>카테고리</button>\n                <button>카테고리</button>\n              </div>\n              <TypeInput\n              onSearch={() => {}}\n              placeholder=\"검색어 입력\"\n              type=\"search\"\n              />\n             \n            </Popup_Content>\n          </Popup>}\n        </div>\n        <div>\n        <button><WidgetsIcon sx={{ fill: \"rgb(41, 44, 45)\", fontSize: \"40px\" }}/></button>\n        <button><PersonIcon sx={{ fill: \"rgb(41, 44, 45)\", fontSize: \"40px\" }}/></button>\n      </div>\n    </div>\n\n      {/* Optional login/logout buttons */}\n     {/*  <div className=\"auth-buttons\">\n        {user ? (\n          <>\n            <span className=\"welcome\">\n              Welcome, <b>{user.name}</b>!\n            </span>\n            <Button size=\"small\" onClick={onLogout} label=\"Log out\" />\n          </>\n        ) : (\n          <>\n            <Button size=\"small\" onClick={onLogin} label=\"Log in\" />\n            <Button primary size=\"small\" onClick={onCreateAccount} label=\"Sign up\" />\n          </>\n        )}\n      </div> */}\n    </HeaderWrap>\n  );\n}\n\nHeader.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n  }),\n  onLogin: PropTypes.func.isRequired,\n  onLogout: PropTypes.func.isRequired,\n  onCreateAccount: PropTypes.func.isRequired,\n};\n\nHeader.defaultProps = {\n  user: null,\n};\n\nconst HeaderWrap = styled.div`\n  ol, ul {\n    list-style: none;\n    margin: 0;\n    padding:0;\n  }\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #fff;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  height: 54px;\n  padding: 0 20px;\n\n  >*{\n    margin: 0;\n    padding:0;\n    line-height: 1.2;\n  }\n  h1{\n    margin: 0;\n  }\n  .left, .right {\n    display: flex;\n    align-items: center;\n    gap:15px;\n  }\n\n   .right {\n\n    button{\n      padding: 0;\n      margin: 0;\n      background: none;\n      border: unset;\n      cursor:pointer;\n\n      &:focus, &:active{\n        svg {\n          fill: #397dfa;\n        }\n      }\n      &:hover svg {\n        fill: #397dfa;\n      }\n    }\n\n    >div{\n      position: relative;\n      display: flex;\n      align-items: center;\n      gap:7px;\n\n      &:first-of-type{\n        &:after{\n          content:'';\n          width:1px;\n          height:30px;\n          display:inline-block;\n          background:#ddd;\n          margin-left:8px;\n        }\n      }\n    }\n    \n   }\n\n  .menu {\n    display: flex;\n    gap: 100px;\n    width:70%;\n  }\n\n  .auth-buttons {\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst Dashboard = styled.div`\n  font-size: 1.2rem;\n  font-weight: bold;\n`;\n\nconst MenuItem = styled.div`\n  font-size: 1.2rem;\n  color: #333;\n  cursor: pointer;\n  \n  &:hover {\n    color: #007bff\n  }\n`\nconst Popup = styled.div`\n  background-color: #fff;\n  border: 1px solid #ddd;\n  position: absolute;\n  z-index: 1000;\n  width: 300px;\n  left: -70px;\n  top: 60px;\n  border-radius:10px;\n`\nconst Popup_Header= styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.06);\n`\nconst Popup_Tit= styled.div`\n  font-weight:600;\n  font-size:18px;\n`\n\nconst Popup_Content= styled.div`\n  \n  .view_all{\n    display: flex;\n    margin-left: auto !important;\n    padding: 10px 20px !important;\n  }\n\n  ul{\n    overflow-y: scroll;\n    max-height: 400px;\n    height: fit-content;\n  \n    li{\n      padding: 20px;\n      border-bottom:1px solid #ddd;\n      \n      &:last-of-type{\n        border-bottom:none;\n      }\n    }\n  }\n`\nconst Stars = styled.ul`\n  li{\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n\n    b{\n      font-weight: 600;\n      color: #222;\n    }\n\n  >div{\n    display:flex;\n    gap:10px;\n    align-items: center;\n\n    span{\n      font-size: 13px;\n      color: rgb(121, 129, 134);\n      \n      &:after{\n        content:'>';\n        width:3px;\n        display:inline-block;\n        margin-left:8px;\n      }\n    \n      &:last-of-type{\n        &:after{\n          display:none;\n        }\n      }\n    }\n  }\n}\n`\n\nconst Notifi = styled.ul`\n  li{\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n    \n    span{\n      font-size: 13px;\n      color: rgb(121, 129, 134);\n    }\n    >div{\n      white-space: nowrap;  \n      overflow: hidden;     \n      text-overflow: ellipsis; \n      max-width: 300px; \n    }\n  }\n`"],"names":[],"sourceRoot":""}