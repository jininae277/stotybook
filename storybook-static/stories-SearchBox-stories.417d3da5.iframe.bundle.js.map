{"version":3,"file":"stories-SearchBox-stories.417d3da5.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;;;;;;;;ACrJA;AACA;AACA;AACA;;;AAGA;AAIA;AAIA;;AAKA;;;;AAKA;AAGA;AAGA;;;;;;AAQA;AACA;AACA;;;;;AAKA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA","sources":["webpack://storybooks/./src/stories/SearchBox.jsx","webpack://storybooks/./src/stories/Button.jsx","webpack://storybooks/./src/stories/ButtonGroup.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport styled from 'styled-components';\nimport SelectCustom from './SelectCustom'; \nimport TypeInput from './TypeInput'; \nimport { Button } from './Button';\nimport  CustomDatePicker from './CustomDatePicker';\nimport AddIcon from '@mui/icons-material/Add';\nimport RemoveIcon from '@mui/icons-material/Remove';\nimport { fullWidth } from './SelectCustom.stories';\n\n\n\n/** Primary UI component for user interaction */\nexport const SearchBoxCon = ({ variant, backgroundColor, size, label, icon, isFullWidth, ...props }) => {\n  const [isDetailVisible, setDetailVisible] = useState(false);\n\n  const toggleDetailVisibility = () => {\n    setDetailVisible(prev => !prev);\n  };\n  \n  return (\n    <SearchBox>\n      <filter_wrap>\n        <b>검색어</b>\n        <div>\n          <SelectCustom\n            //fullWidth\n            placeholder=\"선택하세요\"\n            selected={[]}\n          />\n          <TypeInput\n            //fullWidth\n            onSearch={() => {}}\n            placeholder=\"검색어 입력\"\n            type=\"search\" \n          />\n        </div>\n      </filter_wrap>\n      <filter_wrap>\n        <b>검색어</b>\n        <div>\n          <SelectCustom\n            fullWidth\n            placeholder=\"선택하세요\"\n            selected={[]}\n          />\n          <SelectCustom\n            fullWidth\n            placeholder=\"선택하세요\"\n            selected={[]}\n          />  \n          <SelectCustom\n            fullWidth\n            placeholder=\"선택하세요\"\n            selected={[]}\n          />  \n          <SelectCustom\n            fullWidth\n            placeholder=\"선택하세요\"\n            selected={[]}\n          />  \n        </div>         \n      </filter_wrap>\n\n      {isDetailVisible &&(\n        <div>\n           <filter_wrap_detail>\n            <b>검색어</b>\n            <div>\n              <SelectCustom\n                fullWidth\n                placeholder=\"선택하세요\"\n                selected={[]}\n              />\n              <SelectCustom\n                fullWidth\n                placeholder=\"선택하세요\"\n                selected={[]}\n              />  \n              <SelectCustom\n                fullWidth\n                placeholder=\"선택하세요\"\n                selected={[]}\n              />  \n              <SelectCustom\n                fullWidth\n                placeholder=\"선택하세요\"\n                selected={[]}\n              />  \n            </div>         \n          </filter_wrap_detail>\n          <filter_wrap_detail>\n              <b>검색어</b>\n              <div>\n                <SelectCustom\n                  placeholder=\"선택하세요\"\n                  selected={[]}\n                />\n                <CustomDatePicker type=\"multiButtons\" />\n              </div>\n          </filter_wrap_detail>\n        </div>\n      )}\n      <buttonWrap>\n        <div>\n          <Button\n            label=\"초기화\"\n            variant=\"\"\n          />\n          <Button\n            label=\" 검색 \"\n            onClick={() => {}}\n            variant=\"primary\"\n          />\n        </div>\n        <button onClick={toggleDetailVisibility}>상세검색{isDetailVisible ? <RemoveIcon fontSize=\"small\" /> : <AddIcon fontSize=\"small\" />}</button>\n      </buttonWrap>\n    </SearchBox>\n  );\n};\n\n\nconst SearchBox = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  \n  filter_wrap, filter_wrap_detail{\n    display:flex;\n    align-items: center;\n    gap: 10px;\n    padding: 10px 20px;\n    border-bottom: 1px solid #ccc;\n\n    &:last-of-type{\n      border-bottom:unset;\n    }\n\n    b{\n      width:100px;\n      color:#222;\n    }\n\n    >div{\n      display:flex;\n      width: calc(100% - 100px);\n      gap:10px;  \n    }\n  }\n    filter_wrap_detail{\n      \n      &:first-of-type{\n        border-top:1px solid #ccc;\n      }\n    }\n  \n  buttonWrap{\n    display:flex;\n    align-items: center;\n    padding: 10px 20px;\n    border-top: 1px solid #ccc;\n    justify-content: center;\n    \n    >div{\n      display:flex;\n      align-items: center;\n      justify-content: center;\n      gap: 10px;\n      width: calc(100% - 70px);\n      margin-left: 70px;\n   \n      >Button{\n       width: 70px;\n      }\n    }\n\n    >button{\n      cursor:pointer;\n      display: flex;\n      align-items: center;\n      margin-left: auto;\n      width: 95px;\n      border: 0;\n      background: none;\n      font-size: 14px;\n    }\n\n  }\n\n\n  \n`;\n\n\nSearchBox.defaultProps = {\n  variant: 'default',\n  backgroundColor: null,\n  size: 'medium',\n  icon: null,\n  onClick: undefined,\n};\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport saveIcon from '../icon/icon-save.png';\nimport deleteIcon from '../icon/icon-delete.png';\n\n/** Primary UI component for user interaction */\nexport const Button = ({ \n  variant = 'default', \n  backgroundColor = null, \n  size = 'medium', \n  label, \n  icon = null, \n  isFullWidth = false, \n  onClick = () => {}, \n  ...props \n}) => {\n  return (\n    <StyledButton\n      type=\"button\"\n      variant={variant}\n      size={size}\n      style={backgroundColor && { backgroundColor }}\n      icon={icon}\n      isFullWidth={isFullWidth} \n      onClick={onClick}\n      {...props}\n    > \n      {label}\n    </StyledButton>\n  );\n};\n\n// Define the styled component with conditional styling based on props\nconst StyledButton = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-weight: 700;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  padding: 5px 10px;\n  width: ${({ isFullWidth }) => (isFullWidth ? '100%' : 'auto')};\n  height: ${({ size }) => (size === 'small' ? '22px' : size === 'large' ? '52px' : '40px')};\n  line-height: ${({ size }) => (size === 'small' ? '11px' : size === 'large' ? '22px' : '23px')};\n  font-size: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '16px' : '14px')};\n\n  /* Style based on the variant prop */\n  background-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    'transparent'};\n  color: ${({ variant }) => \n    variant === 'primary' ? 'white' : \n    variant === 'secondary' ? '#333' : \n    '#000'};\n  border-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    '#ddd'};\n\n  box-shadow: ${({ variant }) => \n    variant === 'secondary' ? 'rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset' : 'none'};\n\n  &:disabled {\n    cursor: unset;\n    background-color: ${({ variant }) => \n      variant === 'primary' ? '#eee' : \n      variant === 'secondary' ? '#eee' : '#eee'};\n    border-color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n     color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n  }\n\n  /* iconBtn */\n  &::before {\n    content: '';\n    display: ${({ icon }) => (icon ? 'inline-block' : 'none')};\n    width: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    height: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    margin-right: 6px;\n    vertical-align: middle;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-image: ${({ icon }) => \n      icon === 'save' ? `url(${saveIcon})` : \n      icon === 'delete' ? `url(${deleteIcon})` : 'none'};\n  }\n`;\n\nButton.propTypes = {\n  /** Button variant - default, primary, secondary */\n  variant: PropTypes.oneOf(['default', 'primary', 'secondary']),\n  /** What background color to use */\n  backgroundColor: PropTypes.string,\n  /** How large should the button be? */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** Button contents */\n  label: PropTypes.string.isRequired,\n  /* icon 여부 */\n  icon: PropTypes.oneOf(['save', 'delete']),\n  /** Optional click handler */\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport styled from 'styled-components';\n\n// 스타일링된 ButtonGroup\nconst StyledButtonGroup = styled.div`\n  display: flex;\n\n  > button {\n    box-sizing: border-box;\n    cursor: pointer;\n    height: 40px;\n    padding: 0 20px;\n    border: 1px solid rgb(201, 205, 207);\n    border-radius: 0;\n    border-left:unset;\n    background-color:#fff;\n\n    &:first-of-type {\n      border-radius: 4px 0 0 4px;\n       border-left:1px solid rgb(201, 205, 207);\n    }\n    &:last-of-type {\n      border-radius: 0 4px 4px 0;\n    }\n    &.selected {\n      color: #fff;\n      background: rgb(2, 156, 253);\n      border-color: rgb(2, 156, 253);\n    }\n    &:disabled {\n      cursor: not-allowed;\n      background-color: #ededed;;\n      border-color: rgb(201, 205, 207);\n    }\n    &.selected:disabled {\n      background-color: #ddd;\n    }\n  }\n`;\n\nexport const ButtonGroup = ({ \n    buttons = [],\n    selectedValue = '',\n    onChange,\n    disabled = false,\n  }) => {\n    const handleButtonClick = (value) => {\n      if (!disabled) {\n        onChange(value);\n      }\n  };\n\n  return (\n    <StyledButtonGroup>\n      {buttons.map((button) => (\n        <button\n          key={button.value}\n          className={selectedValue === button.value ? 'selected' : ''}\n          onClick={() => handleButtonClick(button.value)}\n          disabled={disabled}\n        >\n          {button.label}\n        </button>\n      ))}\n    </StyledButtonGroup>\n  );\n};\n\nButtonGroup.propTypes = {\n  buttons: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  selectedValue: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\n/* ButtonGroup.defaultProps = {\n  buttons: [],\n  selectedValue: '',\n  disabled: false,\n};\n */"],"names":[],"sourceRoot":""}