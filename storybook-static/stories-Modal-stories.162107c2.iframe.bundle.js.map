{"version":3,"file":"stories-Modal-stories.162107c2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AA4EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;;;;;;ACxEA;AACA;AACA;AACA;;;AAGA;AAIA;AAIA;;AAKA;;;;AAKA;AAGA;AAGA;;;;;;AAQA;AACA;AACA;;;;;AAKA;;AAIA","sources":["webpack://storybooks/./src/stories/Modal.jsx","webpack://storybooks/./src/stories/Button.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Button } from './Button';\n\n/** Primary UI component for user interaction */\nexport const Modal = ({ size, label, isOpen, onClose, children }) => {\n  \n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n\n  const toggleModal = () => {\n    setIsModalOpen(!isModalOpen); \n  };\n\n\n  const handleClose = () => {\n    setIsModalOpen(false); \n    if (onClose) onClose(); \n  };\n\n  return (\n    <div>\n         <button onClick={toggleModal}>모달 열기</button>\n        \n         {isModalOpen && (\n          <ModalWrap\n            size={size}\n            label={label}\n            isOpen={isModalOpen}\n          >\n            <div className=\"modal\">\n              <modalHeader>\n                <modalTit>타이틀</modalTit>\n                <button className=\"modal-close\" onClick={handleClose}><CloseIcon/></button>\n              </modalHeader>\n              \n              <modalContent>{children || '모달 내용 모달 내용 모달 내용 모달 내용 모달 내용'}</modalContent>\n              <modalBottom>\n                <Button\n                    label=\"버튼1\"\n                    onClick={() => {}}\n                    variant=\"primary\"\n                />\n                <Button\n                    label=\"버튼2\"\n                    onClick={() => {}}\n                    variant=\"secondary\"\n                />\n              </modalBottom>\n            </div>\n          </ModalWrap>\n      )}\n    </div>\n  );\n};\n\nconst ModalWrap = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    .modal {\n      display: flex;\n      flex-direction: column;\n      background: white;\n      border-radius: 8px;\n      box-shadow: inset;\n      position: relative;\n      width: ${({ size }) => (size === 'small' ? '200px' : size === 'large' ? '400px' : size === 'extraLarge' ? '500px' : '300px')};\n     // height: 100%;\n      min-height: 200px;\n      max-height: 400px;\n\n      > modalHeader{\n        display:flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 10px 20px;\n        font-weight:600;\n\n        .modal-close {\n          width: 24px;\n          height: 24px;\n          border: 0;\n          padding:0;\n          background: none;\n        }\n      }\n        \n      > modalContent{\n          padding:20px;\n          overflow-y: scroll;\n      }\n      \n      > modalBottom{\n        display:flex;\n        padding: 10px 20px;\n        justify-content: flex-end;\n        gap: 5px;\n        margin-top:auto;\n      }\n\n    }\n      \n\n    \n`;\n\nModal.propTypes = {\n  size: PropTypes.oneOf(['small', 'medium', 'large', 'extraLarge']),\n  label: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  children: PropTypes.node,\n};\n\nModal.defaultProps = {\n  size: 'medium',\n  isOpen: false,\n  onClose: undefined,\n  children: null,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport saveIcon from '../icon/icon-save.png';\nimport deleteIcon from '../icon/icon-delete.png';\n\n/** Primary UI component for user interaction */\nexport const Button = ({ \n  variant = 'default', \n  backgroundColor = null, \n  size = 'medium', \n  label, \n  icon = null, \n  isFullWidth = false, \n  onClick = () => {}, \n  ...props \n}) => {\n  return (\n    <StyledButton\n      type=\"button\"\n      variant={variant}\n      size={size}\n      style={backgroundColor && { backgroundColor }}\n      icon={icon}\n      isFullWidth={isFullWidth} \n      onClick={onClick}\n      {...props}\n    > \n      {label}\n    </StyledButton>\n  );\n};\n\n// Define the styled component with conditional styling based on props\nconst StyledButton = styled.button`\n  display: inline-block;\n  cursor: pointer;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-weight: 700;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  padding: 5px 10px;\n  width: ${({ isFullWidth }) => (isFullWidth ? '100%' : 'auto')};\n  height: ${({ size }) => (size === 'small' ? '22px' : size === 'large' ? '52px' : '40px')};\n  line-height: ${({ size }) => (size === 'small' ? '11px' : size === 'large' ? '22px' : '23px')};\n  font-size: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '16px' : '14px')};\n\n  /* Style based on the variant prop */\n  background-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    'transparent'};\n  color: ${({ variant }) => \n    variant === 'primary' ? 'white' : \n    variant === 'secondary' ? '#333' : \n    '#000'};\n  border-color: ${({ variant }) => \n    variant === 'primary' ? '#1ea7fd' : \n    variant === 'secondary' ? '#f3f3f3' : \n    '#ddd'};\n\n  box-shadow: ${({ variant }) => \n    variant === 'secondary' ? 'rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset' : 'none'};\n\n  &:disabled {\n    cursor: unset;\n    background-color: ${({ variant }) => \n      variant === 'primary' ? '#eee' : \n      variant === 'secondary' ? '#eee' : '#eee'};\n    border-color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n     color: ${({ variant }) => \n      variant === 'primary' ? '#ddd' : \n      variant === 'secondary' ? '#ddd' : '#ccc'};\n  }\n\n  /* iconBtn */\n  &::before {\n    content: '';\n    display: ${({ icon }) => (icon ? 'inline-block' : 'none')};\n    width: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    height: ${({ size }) => (size === 'small' ? '12px' : size === 'large' ? '20px' : '16px')};\n    margin-right: 6px;\n    vertical-align: middle;\n    background-size: contain;\n    background-repeat: no-repeat;\n    background-image: ${({ icon }) => \n      icon === 'save' ? `url(${saveIcon})` : \n      icon === 'delete' ? `url(${deleteIcon})` : 'none'};\n  }\n`;\n\nButton.propTypes = {\n  /** Button variant - default, primary, secondary */\n  variant: PropTypes.oneOf(['default', 'primary', 'secondary']),\n  /** What background color to use */\n  backgroundColor: PropTypes.string,\n  /** How large should the button be? */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** Button contents */\n  label: PropTypes.string.isRequired,\n  /* icon 여부 */\n  icon: PropTypes.oneOf(['save', 'delete']),\n  /** Optional click handler */\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n"],"names":[],"sourceRoot":""}